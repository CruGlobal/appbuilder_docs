name: Add Issue to Project
on:
  issues:
    types: [opened]

jobs:
  add_to_project:
    runs-on: ubuntu-latest
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.DS_GH_APP_ID }}
          private_key: ${{ secrets.DS_GH_APP_PK }}

      - name: Set environment variables
        run: |
          echo "ORG=CruGlobal" >> $GITHUB_ENV
          echo "PROJECT_NUMBER=2" >> $GITHUB_ENV
          echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Get project ID and fields
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org) {
                projectV2(number: $number) {
                  id
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f org=$ORG -F number=$PROJECT_NUMBER > project_data.json

          echo "PROJECT_ID=$(jq -r '.data.organization.projectV2.id' project_data.json)" >> $GITHUB_ENV
          echo "STATUS_FIELD_ID=$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name=="Status") | .id' project_data.json)" >> $GITHUB_ENV
          echo "DATE_FIELD_ID=$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name=="Date Added") | .id' project_data.json)" >> $GITHUB_ENV
          echo "TODO_OPTION_ID=$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name=="Status") | .options[] | select(.name=="ðŸ“« Inbox") | .id' project_data.json)" >> $GITHUB_ENV

      - name: Add issue to project
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          ITEM_ID=$(gh api graphql -f query='
            mutation($project: ID!, $contentId: ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $contentId}) {
                item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f contentId=${{ github.event.issue.node_id }} --jq '.data.addProjectV2ItemById.item.id')

          echo "ITEM_ID=$ITEM_ID" >> $GITHUB_ENV

      - name: Set fields on project item
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          # Set Status
          gh api graphql -f query='
            mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $projectId
                itemId: $itemId
                fieldId: $fieldId
                value: {
                  singleSelectOptionId: $optionId
                }
              }) {
                projectV2Item {
                  id
                }
              }
            }' -f projectId=$PROJECT_ID -f itemId=$ITEM_ID -f fieldId=$STATUS_FIELD_ID -f optionId=$TODO_OPTION_ID

          # Set Date Added
          gh api graphql -f query='
            mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $projectId
                itemId: $itemId
                fieldId: $fieldId
                value: {
                  text: $value
                }
              }) {
                projectV2Item {
                  id
                }
              }
            }' -f projectId=$PROJECT_ID -f itemId=$ITEM_ID -f fieldId=$DATE_FIELD_ID -f value="$DATE"